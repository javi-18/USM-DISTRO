// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// HextechServiceClient is the client API for HextechService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HextechServiceClient interface {
	// Operaciones CRUD para productos
	AddProduct(ctx context.Context, in *ProductRequest, opts ...grpc.CallOption) (*Response, error)
	RenameProduct(ctx context.Context, in *RenameRequest, opts ...grpc.CallOption) (*Response, error)
	DeleteProduct(ctx context.Context, in *ProductRequest, opts ...grpc.CallOption) (*Response, error)
	// Propagaci贸n de cambios entre nodos
	PropagateChanges(ctx context.Context, in *PropagateRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// Sincronizaci贸n entre nodos
	SyncState(ctx context.Context, in *SyncRequest, opts ...grpc.CallOption) (*SyncResponse, error)
}

type hextechServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewHextechServiceClient(cc grpc.ClientConnInterface) HextechServiceClient {
	return &hextechServiceClient{cc}
}

func (c *hextechServiceClient) AddProduct(ctx context.Context, in *ProductRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/servidoreshextech.HextechService/AddProduct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hextechServiceClient) RenameProduct(ctx context.Context, in *RenameRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/servidoreshextech.HextechService/RenameProduct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hextechServiceClient) DeleteProduct(ctx context.Context, in *ProductRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/servidoreshextech.HextechService/DeleteProduct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hextechServiceClient) PropagateChanges(ctx context.Context, in *PropagateRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/servidoreshextech.HextechService/PropagateChanges", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hextechServiceClient) SyncState(ctx context.Context, in *SyncRequest, opts ...grpc.CallOption) (*SyncResponse, error) {
	out := new(SyncResponse)
	err := c.cc.Invoke(ctx, "/servidoreshextech.HextechService/SyncState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HextechServiceServer is the server API for HextechService service.
// All implementations must embed UnimplementedHextechServiceServer
// for forward compatibility
type HextechServiceServer interface {
	// Operaciones CRUD para productos
	AddProduct(context.Context, *ProductRequest) (*Response, error)
	RenameProduct(context.Context, *RenameRequest) (*Response, error)
	DeleteProduct(context.Context, *ProductRequest) (*Response, error)
	// Propagaci贸n de cambios entre nodos
	PropagateChanges(context.Context, *PropagateRequest) (*empty.Empty, error)
	// Sincronizaci贸n entre nodos
	SyncState(context.Context, *SyncRequest) (*SyncResponse, error)
	mustEmbedUnimplementedHextechServiceServer()
}

// UnimplementedHextechServiceServer must be embedded to have forward compatible implementations.
type UnimplementedHextechServiceServer struct {
}

func (UnimplementedHextechServiceServer) AddProduct(context.Context, *ProductRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddProduct not implemented")
}
func (UnimplementedHextechServiceServer) RenameProduct(context.Context, *RenameRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RenameProduct not implemented")
}
func (UnimplementedHextechServiceServer) DeleteProduct(context.Context, *ProductRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProduct not implemented")
}
func (UnimplementedHextechServiceServer) PropagateChanges(context.Context, *PropagateRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PropagateChanges not implemented")
}
func (UnimplementedHextechServiceServer) SyncState(context.Context, *SyncRequest) (*SyncResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SyncState not implemented")
}
func (UnimplementedHextechServiceServer) mustEmbedUnimplementedHextechServiceServer() {}

// UnsafeHextechServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HextechServiceServer will
// result in compilation errors.
type UnsafeHextechServiceServer interface {
	mustEmbedUnimplementedHextechServiceServer()
}

func RegisterHextechServiceServer(s grpc.ServiceRegistrar, srv HextechServiceServer) {
	s.RegisterService(&HextechService_ServiceDesc, srv)
}

func _HextechService_AddProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HextechServiceServer).AddProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/servidoreshextech.HextechService/AddProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HextechServiceServer).AddProduct(ctx, req.(*ProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HextechService_RenameProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RenameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HextechServiceServer).RenameProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/servidoreshextech.HextechService/RenameProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HextechServiceServer).RenameProduct(ctx, req.(*RenameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HextechService_DeleteProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HextechServiceServer).DeleteProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/servidoreshextech.HextechService/DeleteProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HextechServiceServer).DeleteProduct(ctx, req.(*ProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HextechService_PropagateChanges_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PropagateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HextechServiceServer).PropagateChanges(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/servidoreshextech.HextechService/PropagateChanges",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HextechServiceServer).PropagateChanges(ctx, req.(*PropagateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HextechService_SyncState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SyncRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HextechServiceServer).SyncState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/servidoreshextech.HextechService/SyncState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HextechServiceServer).SyncState(ctx, req.(*SyncRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// HextechService_ServiceDesc is the grpc.ServiceDesc for HextechService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HextechService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "servidoreshextech.HextechService",
	HandlerType: (*HextechServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddProduct",
			Handler:    _HextechService_AddProduct_Handler,
		},
		{
			MethodName: "RenameProduct",
			Handler:    _HextechService_RenameProduct_Handler,
		},
		{
			MethodName: "DeleteProduct",
			Handler:    _HextechService_DeleteProduct_Handler,
		},
		{
			MethodName: "PropagateChanges",
			Handler:    _HextechService_PropagateChanges_Handler,
		},
		{
			MethodName: "SyncState",
			Handler:    _HextechService_SyncState_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "servidoreshextech.proto",
}
