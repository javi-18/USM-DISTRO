// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BrokerServiceClient is the client API for BrokerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BrokerServiceClient interface {
	RedirectRequest(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	HandleInconsistency(ctx context.Context, in *InconsistencyRequest, opts ...grpc.CallOption) (*Response, error)
}

type brokerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBrokerServiceClient(cc grpc.ClientConnInterface) BrokerServiceClient {
	return &brokerServiceClient{cc}
}

func (c *brokerServiceClient) RedirectRequest(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/broker.BrokerService/RedirectRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *brokerServiceClient) HandleInconsistency(ctx context.Context, in *InconsistencyRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/broker.BrokerService/HandleInconsistency", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BrokerServiceServer is the server API for BrokerService service.
// All implementations must embed UnimplementedBrokerServiceServer
// for forward compatibility
type BrokerServiceServer interface {
	RedirectRequest(context.Context, *Request) (*Response, error)
	HandleInconsistency(context.Context, *InconsistencyRequest) (*Response, error)
	mustEmbedUnimplementedBrokerServiceServer()
}

// UnimplementedBrokerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBrokerServiceServer struct {
}

func (UnimplementedBrokerServiceServer) RedirectRequest(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RedirectRequest not implemented")
}
func (UnimplementedBrokerServiceServer) HandleInconsistency(context.Context, *InconsistencyRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandleInconsistency not implemented")
}
func (UnimplementedBrokerServiceServer) mustEmbedUnimplementedBrokerServiceServer() {}

// UnsafeBrokerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BrokerServiceServer will
// result in compilation errors.
type UnsafeBrokerServiceServer interface {
	mustEmbedUnimplementedBrokerServiceServer()
}

func RegisterBrokerServiceServer(s grpc.ServiceRegistrar, srv BrokerServiceServer) {
	s.RegisterService(&BrokerService_ServiceDesc, srv)
}

func _BrokerService_RedirectRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BrokerServiceServer).RedirectRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/broker.BrokerService/RedirectRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BrokerServiceServer).RedirectRequest(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _BrokerService_HandleInconsistency_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InconsistencyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BrokerServiceServer).HandleInconsistency(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/broker.BrokerService/HandleInconsistency",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BrokerServiceServer).HandleInconsistency(ctx, req.(*InconsistencyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BrokerService_ServiceDesc is the grpc.ServiceDesc for BrokerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BrokerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "broker.BrokerService",
	HandlerType: (*BrokerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RedirectRequest",
			Handler:    _BrokerService_RedirectRequest_Handler,
		},
		{
			MethodName: "HandleInconsistency",
			Handler:    _BrokerService_HandleInconsistency_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "broker.proto",
}

// HextechServiceClient is the client API for HextechService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HextechServiceClient interface {
	HandleRequest(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	ResolveInconsistency(ctx context.Context, in *InconsistencyRequest, opts ...grpc.CallOption) (*Response, error)
	GetVectorClock(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Response, error)
}

type hextechServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewHextechServiceClient(cc grpc.ClientConnInterface) HextechServiceClient {
	return &hextechServiceClient{cc}
}

func (c *hextechServiceClient) HandleRequest(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/broker.HextechService/HandleRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hextechServiceClient) ResolveInconsistency(ctx context.Context, in *InconsistencyRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/broker.HextechService/ResolveInconsistency", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hextechServiceClient) GetVectorClock(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/broker.HextechService/GetVectorClock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HextechServiceServer is the server API for HextechService service.
// All implementations must embed UnimplementedHextechServiceServer
// for forward compatibility
type HextechServiceServer interface {
	HandleRequest(context.Context, *Request) (*Response, error)
	ResolveInconsistency(context.Context, *InconsistencyRequest) (*Response, error)
	GetVectorClock(context.Context, *Empty) (*Response, error)
	mustEmbedUnimplementedHextechServiceServer()
}

// UnimplementedHextechServiceServer must be embedded to have forward compatible implementations.
type UnimplementedHextechServiceServer struct {
}

func (UnimplementedHextechServiceServer) HandleRequest(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandleRequest not implemented")
}
func (UnimplementedHextechServiceServer) ResolveInconsistency(context.Context, *InconsistencyRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResolveInconsistency not implemented")
}
func (UnimplementedHextechServiceServer) GetVectorClock(context.Context, *Empty) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVectorClock not implemented")
}
func (UnimplementedHextechServiceServer) mustEmbedUnimplementedHextechServiceServer() {}

// UnsafeHextechServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HextechServiceServer will
// result in compilation errors.
type UnsafeHextechServiceServer interface {
	mustEmbedUnimplementedHextechServiceServer()
}

func RegisterHextechServiceServer(s grpc.ServiceRegistrar, srv HextechServiceServer) {
	s.RegisterService(&HextechService_ServiceDesc, srv)
}

func _HextechService_HandleRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HextechServiceServer).HandleRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/broker.HextechService/HandleRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HextechServiceServer).HandleRequest(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _HextechService_ResolveInconsistency_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InconsistencyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HextechServiceServer).ResolveInconsistency(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/broker.HextechService/ResolveInconsistency",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HextechServiceServer).ResolveInconsistency(ctx, req.(*InconsistencyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HextechService_GetVectorClock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HextechServiceServer).GetVectorClock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/broker.HextechService/GetVectorClock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HextechServiceServer).GetVectorClock(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// HextechService_ServiceDesc is the grpc.ServiceDesc for HextechService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HextechService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "broker.HextechService",
	HandlerType: (*HextechServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HandleRequest",
			Handler:    _HextechService_HandleRequest_Handler,
		},
		{
			MethodName: "ResolveInconsistency",
			Handler:    _HextechService_ResolveInconsistency_Handler,
		},
		{
			MethodName: "GetVectorClock",
			Handler:    _HextechService_GetVectorClock_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "broker.proto",
}
